from kirovy.exceptions.view_exceptions import KirovyValidationError
from kirovy.serializers import KirovySerializer, CncNetUserOwnedModelSerializer
from rest_framework import serializers
from kirovy import typing as t
from kirovy.models import cnc_map, CncGame, MapCategory, CncFileExtension


class MapParserSerializerField(serializers.Field): ...


class MapCategorySerializer(KirovySerializer):
    name = serializers.CharField(min_length=3)
    slug = serializers.CharField(min_length=2, read_only=True)

    def create(self, validated_data: dict) -> MapCategory:
        return MapCategory.objects.create(**validated_data)

    def update(self, instance: MapCategory, validated_data: dict) -> MapCategory:
        instance.name = validated_data.get("name", instance.name)
        instance.last_modified_by_id = validated_data.get("last_modified_by_id", None)
        # slug is automatically set in ``.save``.
        instance.save(update_fields=["name", "slug", "last_modified_by_id"])
        instance.refresh_from_db()
        return instance


class CncMapFileSerializer(KirovySerializer):

    class Meta:
        model = cnc_map.CncMapFile
        # We return the ID instead of the whole object.
        exclude = ["cnc_game", "cnc_map", "file_extension"]
        fields = "__all__"

    width = serializers.IntegerField()
    """attr: The map height.

    Extracted using :class:`kirovy.services.cnc_gen_2_services.CncGen2MapParser`
    """

    height = serializers.IntegerField()
    """attr: The map height.

    Extracted using :class:`kirovy.services.cnc_gen_2_services.CncGen2MapParser`
    """

    version = serializers.IntegerField(read_only=True)
    """attr: The map version.

    Set by :func:`kirovy.models.cnc_map.CncMapFile.save` on creation and cannot be modified.
    Allows map authors to version their maps to e.g. update your campaign with fixed scripts.
    """

    cnc_map_id = serializers.PrimaryKeyRelatedField(
        source="cnc_map",
        queryset=cnc_map.CncMap.objects.all(),
        pk_field=serializers.UUIDField(),
    )

    name = serializers.CharField(read_only=True)
    """attr: The filename.

    Generated by :func:`kirovy.models.cnc_map.CncMapFile.save` and cannot be customized.
    """

    file = serializers.FileField(use_url=True)

    file_extension_id = serializers.PrimaryKeyRelatedField(
        source="file_extension",
        queryset=CncFileExtension.objects.filter(extension_type__in=cnc_map.CncMapFile.ALLOWED_EXTENSION_TYPES),
        pk_field=serializers.UUIDField(),
    )

    cnc_game_id = serializers.PrimaryKeyRelatedField(
        source="cnc_game",
        queryset=CncGame.objects.all(),
        pk_field=serializers.UUIDField(),
    )

    hash_md5 = serializers.CharField(required=True, allow_blank=False)
    hash_sha512 = serializers.CharField(required=True, allow_blank=False)
    hash_sha1 = serializers.CharField(required=True, allow_blank=False)

    def create(self, validated_data: t.DictStrAny) -> cnc_map.CncMapFile:
        map_file = cnc_map.CncMapFile(**validated_data)
        map_file.save()
        return map_file

    def update(self, instance: cnc_map.CncMapFile, validated_data: t.DictStrAny) -> cnc_map.CncMapFile:
        # Map files are not meant to be updated. Only created, or deleted.
        raise KirovyValidationError(
            detail="Map files cannot be updated. Upload a new version of your map",
            code="cannot-update-maps",
            additional={"cnc_map_id": str(instance.cnc_map_id)},
        )


class CncMapBaseSerializer(CncNetUserOwnedModelSerializer):
    map_name = serializers.CharField(
        required=True,
        allow_null=False,
        allow_blank=False,
        trim_whitespace=True,
        min_length=3,
    )
    description = serializers.CharField(
        required=True,
        allow_null=False,
        allow_blank=True,
        trim_whitespace=True,
        min_length=10,
    )
    cnc_game_id = serializers.PrimaryKeyRelatedField(
        source="cnc_game",
        queryset=CncGame.objects.all(),
        pk_field=serializers.UUIDField(),
    )
    category_ids = serializers.PrimaryKeyRelatedField(
        source="categories",
        pk_field=serializers.UUIDField(),
        many=True,
        read_only=True,  # Set it manually.
    )
    is_published = serializers.BooleanField(
        default=False,
    )

    # This field is only set via client uploads.
    is_temporary = serializers.BooleanField(read_only=True)

    # These fields are only available for admins to set.
    is_reviewed = serializers.BooleanField(read_only=True)
    is_banned = serializers.BooleanField(read_only=True)

    # Legacy maps will be added via the legacy serializer.
    is_legacy = serializers.BooleanField(read_only=True)
    legacy_upload_date = serializers.DateTimeField(
        read_only=True,
    )
    incomplete_upload = serializers.BooleanField(
        default=False,
    )

    parent_id = serializers.PrimaryKeyRelatedField(
        source="parent",
        queryset=cnc_map.CncMap.objects.all(),
        pk_field=serializers.UUIDField(),
        many=False,
        allow_null=True,
        allow_empty=False,
        default=None,
    )

    # TODO: These serializer method fields really ought to be sub serializers
    # TODO: Make sure queries are optimized in the views for listing maps.
    latest_map_file_hash = serializers.SerializerMethodField()
    game_slug = serializers.SerializerMethodField()
    created_date = serializers.DateTimeField("%Y-%m-%d", source="created", read_only=True)

    class Meta:
        model = cnc_map.CncMap
        # We return the ID instead of the whole object.
        exclude = ["cnc_game", "categories", "parent"]
        fields = "__all__"

    def get_latest_map_file_hash(self, obj: cnc_map.CncMap) -> t.Optional[str]:
        if latest := obj.cncmapfile_set.order_by("-version").first():
            return latest.hash_sha1
        return None

    def get_game_slug(self, obj: cnc_map.CncMap) -> str:
        return obj.cnc_game.slug

    def create(self, validated_data: t.DictStrAny) -> cnc_map.CncMap:
        cnc_map_instance = cnc_map.CncMap(**validated_data)
        cnc_map_instance.save()
        return cnc_map_instance
