"""
Django settings for kirovy project.

Generated by 'django-admin startproject' using Django 4.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path

from kirovy.settings import settings_constants
from kirovy.utils import file_utils
from kirovy.utils.settings_utils import (
    get_env_var,
    secret_key_validator,
    not_allowed_on_prod,
    run_environment_valid,
)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_env_var("SECRET_KEY", validation_callback=secret_key_validator)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = get_env_var("DEBUG", False, validation_callback=not_allowed_on_prod)

ALLOWED_HOSTS = get_env_var("ALLOWED_HOSTS", "localhost,mapdb-nginx").split(",")

MAX_UPLOADED_FILE_SIZE_MAP = file_utils.ByteSized(mega=25)


# Application definition

INSTALLED_APPS = [
    "kirovy",
    "django.contrib.postgres",  # necessary for full-text search and advanced postgres functionality.
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_filters",  # Used for advanced querying on the API.
    "rest_framework",  # Django REST Framework.
    "drf_spectacular",  # Generates openapi docs.
    "drf_spectacular_sidecar",  # swagger assets for openapi
]


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "kirovy.urls"  # The file that holds our URL routing.

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "kirovy.wsgi.application"

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "kirovy.authentication.CncNetAuthentication",
    ],
    "EXCEPTION_HANDLER": "kirovy.exception_handler.kirovy_exception_handler",
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}
"""
attr: Define the default authentication backend for endpoints.
Can be overwritten for views, but this is rare. See :class:`kirovy.authentication.CncNetAuthentication`.

.. warning::

    Authentication is **not** a permission system. Authentication just checks if a user is logged in or
    not. For checking e.g. object permissions, see the module :mod:`kirovy.permissions`. To understand how permissions
    are set in Django Rest Framework, see `The DRF docs <https://www.django-rest-framework.org/api-guide/permissions/>`_
"""

SPECTACULAR_SETTINGS = {
    "TITLE": "Kirovy",
    "DESCRIPTION": "CnCNet Map API",
    "VERSION": "0.1.0",
    "SERVE_INCLUDE_SCHEMA": False,
    "SWAGGER_UI_DIST": "SIDECAR",  # shorthand to use the sidecar instead
    "SWAGGER_UI_FAVICON_HREF": "SIDECAR",
    "REDOC_DIST": "SIDECAR",
}


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    # If you use docker compose then these should be defined for you.
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": get_env_var("POSTGRES_DB"),
        "USER": get_env_var("POSTGRES_USER"),
        "PASSWORD": get_env_var("POSTGRES_PASSWORD"),
        "HOST": "db",
        "PORT": get_env_var("POSTGRES_PORT"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

CNC_GAME_IMAGE_DIRECTORY = "game_images/"
"""
str: The directory inside of :attr:`~kirovy.settings._base.STATIC_URL` where we store game-specific and mod-specific
logos and backgrounds. So a Red Alert 2 icon would be in e.g. ``URL/static/game_images/ra2/icons/allies.png``
"""


CNC_MAP_DIRECTORY = "maps"
"""attr: The directory, beneath the game slug, where map files will be stored."""


### --------------- SERVING FILES ---------------
### This section of settings has to do with serving files
### I recommend having `docker-compose.yml` and `nginx.conf` open if you're trying to decipher these settings.

MEDIA_ROOT = "/data/cncnet_silo/"
""":attr: The directory where all user uploads will be stored."""

MEDIA_URL = "silo/"
"""str: The URL path that ``settings.MEDIA_ROOT`` files will be served from.
The URL will be ``HOST/silo/``

Matches the path in :file:`nginx.conf`.
"""

STATIC_URL = "static/"
"""str: The URL path for serving web files. This is for assets for the website, **not** for uploads.

This also doubles as the repo directory name for where kirovy stores static files before ``collectstatic`` gathers
them to be served by nginx.
"""

STATICFILES_DIRS = (Path(BASE_DIR, STATIC_URL),)
""":attr: Directories to gather as part of ``collectstatic``.

All assets listed here will be bundled into a single directory -- defined by ``STATIC_ROOT`` -- as part of
the ``collectstatiic`` command during the build process.
"""

STATIC_ROOT = "/data/cncnet_static"
"""attr: The directory where django will gather static files to when ``collectstatic`` is run.

``collectstatic`` is a command run as part of the build process. It gathers the assets from the
:attr:`kirovy.settings._base.STATICFILES_DIRS` and merges them all into one place for serving via nginx.
This is necessary because django app dependencies -- like the admin plugin -- have their own static assets.

Basically, ``collectstatic`` copies static files from your project directories to the web server's exposed directory.
"""

### ------------- END SERVING FILES -------------

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTH_USER_MODEL = "kirovy.CncUser"


RUN_ENVIRONMENT = get_env_var("RUN_ENVIRONMENT", settings_constants.RunEnvironment.PRODUCTION, run_environment_valid)
"""attr: Defines which type of environment we are running on. Useful for debug logic."""
